<div>
  <div class="row">
    <div class="col-md-8">
      <textarea id="code-screen">{{content}}</textarea>
      <div id="Position" >
        <button type="button" class="btn btn-primary" onclick="Javascript()">Javascript</button>
        <button type="button" class="btn btn-primary" onclick="Pascal()">Pascal</button>
        <button type="button" class="btn btn-primary" onclick="PHP()">PHP</button>
        <button type="button" class="btn btn-primary" onclick="CSS()">CSS</button>
        <button type="button" class="btn btn-primary" onclick="Python()">Python</button>
        <button type="button" class="btn btn-primary" onclick="CPP()">C++</button>
     </div>
    </div>
    <div class="col-md-4" id="chatbox">
      <div class="panel panel-primary">
        <!-- VIDEO CALL -->
        <h1 class="title">Appel video</h1>
        <p id="notification" hidden></p>
        <div class="entry-modal" id="entry-modal">
          <p>Créer ou Rejoindre Réunion</p>
          <input id="room-input" class="room-input" placeholder="Entrez Salle ID">
          <div>
            <button onclick="createRoom()">Créez Salle</button>
            <button onclick="joinRoom()">Rejoindre Salle</button>

          </div>
        </div>
        <div class="meet-area">
          <!-- Remote Video Element-->
          <video id="second-video"></video>

          <!-- Local Video Element-->
          <video id="my-video"></video>
        </div>

        <!-- CHAT ROOM -->
        <div class="panel-heading">
          CHAT ROOM
          <span class="pull-right" id="chatbox-username" >
            {{#if user}}
            {{user.name}}
            {{/if}}
          </span>
        </div>
        <div class="panel-body">
          <ul class="media-list" style="heigh: 300px; overflow-y: scroll" id="chatbox-listMessages">

          </ul>
        </div>
        <div class="panel-footer">
          <div class="input-group">
            <input type="text" class="form-control" placeholder="Entrer message" id="userMessage" />
            <span class="input-group-btn">
              <button type="button" class="btn btn-primary"  id="Sendit" onclick="sendMessage()">Envoyer</button>
              
            </span>
          </div>
        </div>
      </div>



    </div>
  </div>
</div>

<input type="hidden" value="{{roomId}}" id="roomId" />





<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.25.0/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.25.0/mode/javascript/javascript.min.js"></script>

<script src="/plugins/ot/ot.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>




<script>

  var sourceObject = HTMLMediaElement.srcObject;
  HTMLMediaElement.srcObject = sourceObject;


  var EditorClient = ot.EditorClient;
  var SocketIOAdapter = ot.SocketIOAdapter;
  var CodeMirrorAdapter = ot.CodeMirrorAdapter;
  

  var socket = io.connect();
  var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
    lineNumbers: true,
    theme: "monokai"
  });

  var code = $('#code-screen').val();
  var cmClient;
  function init(str, revision, clients, serverAdapter) {
    if (!code) {
      editor.setValue(str);
    }

    cmClient = window.cmClient = new EditorClient(
      revision, clients, serverAdapter, new CodeMirrorAdapter(editor)
    );
  };

  socket.on('doc', function (obj) {
    init(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket));
  });


  
  

  var username = $("#chatbox-username").val();
  if (username === "") {
    var userId = Math.floor(Math.random() * 9999).toString();
    username = "User" + userId;
    $("#chatbox-username").text(username);
  };

  var roomId = $('#roomId').val();
  socket.emit('joinRoom', { room: roomId, username: username });

  var userMessage = function (name, text) {
    return ('<li class="media"> <div class="media-body"> <div class="media">' +
      '<div class="media-body"' +
      '<b>' + name + '</b> : ' + text +
      '<hr/> </div></div></div></li>'
    );
  };

  var sendMessage = function () {
    var userMessage = $('#userMessage').val();
    socket.emit('chatMessage', { message: userMessage, username: username });
    $('#userMessage').val("");
  };

  socket.on('chatMessage', function (data) {
    $('#chatbox-listMessages').append(userMessage(data.username, data.message));
  });


  const PRE = "DELTA"
  const SUF = "MEET"
  var room_id;
  var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
  var local_stream;

  


  

function Javascript() {
  function downloadString(text, fileType, fileName) {
  var blob = new Blob([text], { type: fileType });

  var a = document.createElement('a');
  a.download = fileName;
  a.href = URL.createObjectURL(blob);
  a.dataset.downloadurl = [fileType, a.download, a.href].join(':');
  a.style.display = "none";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);
}

   downloadString(code, "text", "Monjavascript.js")

}

function Pascal() {
  function downloadString(text, fileType, fileName) {
  var blob = new Blob([text], { type: fileType });

  var a = document.createElement('a');
  a.download = fileName;
  a.href = URL.createObjectURL(blob);
  a.dataset.downloadurl = [fileType, a.download, a.href].join(':');
  a.style.display = "none";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);
}

   downloadString(code, "text", "MonPascal.pas")

}

function PHP() {
  function downloadString(text, fileType, fileName) {
  var blob = new Blob([text], { type: fileType });

  var a = document.createElement('a');
  a.download = fileName;
  a.href = URL.createObjectURL(blob);
  a.dataset.downloadurl = [fileType, a.download, a.href].join(':');
  a.style.display = "none";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);
}

   downloadString(code, "text", "MonPHP.php")

}

function CSS() {
  function downloadString(text, fileType, fileName) {
  var blob = new Blob([text], { type: fileType });

  var a = document.createElement('a');
  a.download = fileName;
  a.href = URL.createObjectURL(blob);
  a.dataset.downloadurl = [fileType, a.download, a.href].join(':');
  a.style.display = "none";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);
}

   downloadString(code, "text", "MonCss.css")

}
function Python() {
  function downloadString(text, fileType, fileName) {
  var blob = new Blob([text], { type: fileType });

  var a = document.createElement('a');
  a.download = fileName;
  a.href = URL.createObjectURL(blob);
  a.dataset.downloadurl = [fileType, a.download, a.href].join(':');
  a.style.display = "none";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);
}

   downloadString(code, "text", "MonPython.py")

}
function CPP() {
  function downloadString(text, fileType, fileName) {
  var blob = new Blob([text], { type: fileType });

  var a = document.createElement('a');
  a.download = fileName;
  a.href = URL.createObjectURL(blob);
  a.dataset.downloadurl = [fileType, a.download, a.href].join(':');
  a.style.display = "none";
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);
}

   downloadString(code, "text", "MonCpp.cpp")

}








  function createRoom() {
    console.log("Creating Room")
    let room = document.getElementById("room-input").value;
    if (room == " " || room == "") {
      alert("Veuillez saisir le numéro de la chambre.")
      return;
    }
    room_id = PRE + room + SUF;
    let peer = new Peer(room_id)
    peer.on('open', (id) => {
      console.log("Peer Connected with ID: ", id)
      hideModal()
      getUserMedia({ video: true, audio: true }, (stream) => {
        local_stream = stream;
        setLocalStream(local_stream)
      }, (err) => {
        console.log(err)
      })
      notify("En attente de l'adhésion des pairs.")
    })
    peer.on('call', (call) => {
      call.answer(local_stream);
      call.on('stream', (stream) => {
        setRemoteStream(stream)
      })
    })
  }
//navigator.mediaDevices.getUserMedia({video: {}}) .then((stream)=> {video.srcObject = stream;}, (err)=> console.error(err));



  async function setLocalStream(stream) {

    const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true });
    let video = document.getElementById("my-video");
    video.srcObject = stream;
    video.muted = true;
    video.play();;
  }

  async function setRemoteStream(stream) {

    const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true});
    let video = document.getElementById("second-video");
    video.srcObject = stream;
    video.muted = false;
    
    video.play();;
  }

  




  function hideModal() {
    document.getElementById("entry-modal").hidden = true
  }

  function notify(msg) {
    let notification = document.getElementById("notification")
    notification.innerHTML = msg
    notification.hidden = false
    setTimeout(() => {
      notification.hidden = true;
    }, 3000)
  }


  function joinRoom() {
    console.log("Joining Room")
    let room = document.getElementById("room-input").value;
    if (room == " " || room == "") {
      alert("Veuillez saisir le numéro de la chambre")
      return;
    }
    room_id = PRE + room + SUF;
    hideModal()
    let peer = new Peer()
    peer.on('open', (id) => {
      console.log("Connected with Id: " + id)
      getUserMedia({ video: true, audio: true }, (stream) => {
        local_stream = stream;
        setLocalStream(local_stream)
        notify("En attente de l'adhésion des pairs.")
        let call = peer.call(room_id, stream)
        call.on('stream', (stream) => {
          setRemoteStream(stream);
        })
      }, (err) => {
        console.log(err)
      })

    })
  }



document.getElementById("userMessage").addEventListener("keyup", function(event) {
  if (event.keyCode === 13) {
   event.preventDefault();
   document.getElementById("Sendit").click();
  }
});



</script>